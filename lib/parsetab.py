
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA COMMENT EQ LPAREN LSBRACE NAME RET RPAREN RSBRACE TYPE VALUE\n            expression : func \n                       | func doc\n        \n            empty :\n        \n            func : NAME LPAREN funcargs RPAREN\n                 | NAME LPAREN funcargs RPAREN funcret\n        \n            funcargs : empty\n                     | args\n                     | args LSBRACE COMMA optargs RSBRACE\n        \n            args : args COMMA arg\n                 | arg\n        \n            arg : NAME\n                | argtype NAME\n        \n            argtype : LPAREN TYPE RPAREN\n        \n            optargs : optargs LSBRACE COMMA optargs RSBRACE\n                    | optarg\n        \n            optarg : arg EQ VALUE\n        \n            funcret : RET TYPE\n        \n            doc : COMMENT\n        '
    
_lr_action_items = {'NAME':([0,6,13,17,19,22,31,],[3,7,18,7,-13,7,7,]),'$end':([1,2,4,5,15,20,24,],[0,-1,-2,-18,-4,-5,-17,]),'COMMENT':([2,15,20,24,],[5,-4,-5,-17,]),'LPAREN':([3,6,17,22,31,],[6,8,8,8,8,]),'RPAREN':([6,7,9,10,11,12,14,18,23,29,],[-3,-11,15,-6,-7,-10,19,-12,-9,-8,]),'LSBRACE':([7,11,12,18,23,25,26,32,33,34,],[-11,16,-10,-12,-9,28,-15,-16,28,-14,]),'COMMA':([7,11,12,16,18,23,28,],[-11,17,-10,22,-12,-9,31,]),'EQ':([7,18,27,],[-11,-12,30,]),'TYPE':([8,21,],[14,24,]),'RET':([15,],[21,]),'RSBRACE':([25,26,32,33,34,],[29,-15,-16,34,-14,]),'VALUE':([30,],[32,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,],[1,]),'func':([0,],[2,]),'doc':([2,],[4,]),'funcargs':([6,],[9,]),'empty':([6,],[10,]),'args':([6,],[11,]),'arg':([6,17,22,31,],[12,23,27,27,]),'argtype':([6,17,22,31,],[13,13,13,13,]),'funcret':([15,],[20,]),'optargs':([22,31,],[25,33,]),'optarg':([22,31,],[26,26,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> func','expression',1,'p_expression','FunctionParser.py',133),
  ('expression -> func doc','expression',2,'p_expression','FunctionParser.py',134),
  ('empty -> <empty>','empty',0,'p_empty','FunctionParser.py',145),
  ('func -> NAME LPAREN funcargs RPAREN','func',4,'p_func','FunctionParser.py',151),
  ('func -> NAME LPAREN funcargs RPAREN funcret','func',5,'p_func','FunctionParser.py',152),
  ('funcargs -> empty','funcargs',1,'p_funcargs','FunctionParser.py',164),
  ('funcargs -> args','funcargs',1,'p_funcargs','FunctionParser.py',165),
  ('funcargs -> args LSBRACE COMMA optargs RSBRACE','funcargs',5,'p_funcargs','FunctionParser.py',166),
  ('args -> args COMMA arg','args',3,'p_args','FunctionParser.py',178),
  ('args -> arg','args',1,'p_args','FunctionParser.py',179),
  ('arg -> NAME','arg',1,'p_arg','FunctionParser.py',190),
  ('arg -> argtype NAME','arg',2,'p_arg','FunctionParser.py',191),
  ('argtype -> LPAREN TYPE RPAREN','argtype',3,'p_argtype','FunctionParser.py',204),
  ('optargs -> optargs LSBRACE COMMA optargs RSBRACE','optargs',5,'p_optargs','FunctionParser.py',210),
  ('optargs -> optarg','optargs',1,'p_optargs','FunctionParser.py',211),
  ('optarg -> arg EQ VALUE','optarg',3,'p_optarg','FunctionParser.py',221),
  ('funcret -> RET TYPE','funcret',2,'p_funcret','FunctionParser.py',228),
  ('doc -> COMMENT','doc',1,'p_doc','FunctionParser.py',234),
]
